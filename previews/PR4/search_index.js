var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api/#Types","page":"API Reference","title":"Types","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"AbstractRGBE\nAbstractXYZE\nAbstractCCCE\nAbstractRGBE32\nAbstractXYZE32\nAbstractCCCE32\nRGBE32\nXYZE32\nCCCE32","category":"page"},{"location":"api/#HDRColorTypes.RGBE32","page":"API Reference","title":"HDRColorTypes.RGBE32","text":"RGBE32{T<:AbstractFloat} <: AbstractRGBE32{T}\n\n32-bit RGBE color type based on the Radiance HDR format.\n\nnote: Note\nWhile ColorTypes.RGB is usually assumed to be gamma-corrected sRGB, the RGBE format usually handles linear RGBs. The color primaries may also differ from those of sRGB.\n\n\n\n\n\n","category":"type"},{"location":"api/#HDRColorTypes.XYZE32","page":"API Reference","title":"HDRColorTypes.XYZE32","text":"XYZE32{T<:AbstractFloat} <: AbstractXYZE32{T}\n\n32-bit XYZE color type based on the Radiance HDR format.\n\n\n\n\n\n","category":"type"},{"location":"api/#HDRColorTypes.CCCE32","page":"API Reference","title":"HDRColorTypes.CCCE32","text":"CCCE32{T} = Union{RGBE32{T}, XYZE32{T}}\n\n\n\n\n\n","category":"type"},{"location":"api/#Functions","page":"API Reference","title":"Functions","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"rgbe32\nxyze32\nccce32","category":"page"},{"location":"api/#HDRColorTypes.rgbe32","page":"API Reference","title":"HDRColorTypes.rgbe32","text":"rgbe32(r8::UInt8, g8::UInt8, b8::UInt8, e8::UInt8) -> RGBE32{Float32}\n\nConstruct an RGBE32 color from four arguments in UInt8. Note that RGBE32(r8, g8, b8, e8) is not allowed for compatibility with other AbstractRGB and TransparentRGB color constructors.\n\nSee also ccce32.\n\n\n\n\n\nrgbe32(rgbe::UInt32) -> RGBE32{Float32}\n\nConstruct an RGBE32 color from a UInt32 value in 0xRRGGBBEE format.\n\nSee also ccce32.\n\n\n\n\n\n","category":"function"},{"location":"api/#HDRColorTypes.xyze32","page":"API Reference","title":"HDRColorTypes.xyze32","text":"xyze32(x8::UInt8, y8::UInt8, z8::UInt8, e8::UInt8) -> XYZE32{Float32}\n\nConstruct an XYZE32 color from four arguments of UInt8. Note that XYZE32(x8, y8, z8, e8) is not allowed for compatibility with other XYZ, AXYZ, and XYZA color constructors.\n\nSee also ccce32.\n\n\n\n\n\nxyze32(xyze::UInt32) -> XYZE32{Float32}\n\nConstruct an XYZE32 color from a UInt32 value in 0xXXYYZZEE format.\n\nSee also ccce32.\n\n\n\n\n\n","category":"function"},{"location":"api/#HDRColorTypes.ccce32","page":"API Reference","title":"HDRColorTypes.ccce32","text":"ccce32(RGBE32{T}, c1::UInt8, c2::UInt8, c3::UInt8, e::UInt8) -> RGBE32{T}\nccce32(XYZE32{T}, c1::UInt8, c2::UInt8, c3::UInt8, e::UInt8) -> XYZE32{T}\n\nConstruct a Radiance HDR format color from four arguments of UInt8. If the component type T is not specified, Float32 is applied.\n\nThis function is a generic version of rgbe32 and xyze32.\n\n\n\n\n\nccce32(RGBE32{T}, ccce::UInt32) -> RGBE32{T}\nccce32(XYZE32{T}, ccce::UInt32) -> XYZE32{T}\n\nConstruct a Radiance HDR format color from a UInt32 value in 0xRRGGBBEE or 0xXXYYZZEE format. If the component type T is not specified, Float32 is applied.\n\nThis function is a generic version of rgbe32 and xyze32.\n\n\n\n\n\n","category":"function"},{"location":"#HDRColorTypes","page":"Introduction","title":"HDRColorTypes","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package is an add-on to ColorTypes, and provides color types for high dynamic range imaging.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Note that types such as RGB{Float16} are already supported in ColorTypes. Currently this package supports the Radiance formats RGBE32 and XYZE32.","category":"page"},{"location":"#RGBE32-and-XYZE32","page":"Introduction","title":"RGBE32 and XYZE32","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"RGBE32 and XYZE32 are color types based on floating-point numbers with three color component mantissa parts and one exponent part shared by the three. The mantissa parts and exponent part are all represented in 8-bit, and the colors have the total size of 32-bit.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"RGBE32 and XYZE32 are defined as types with four fields of type UInt8 as follows.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"struct RGBE32{T<:AbstractFloat} <: AbstractRGBE32{T}\n    c1::UInt8\n    c2::UInt8\n    c3::UInt8\n    e::UInt8\nend","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"struct XYZE32{T<:AbstractFloat} <: AbstractXYZE32{T}\n    c1::UInt8\n    c2::UInt8\n    c3::UInt8\n    e::UInt8\nend","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The fact that they have four fields contrasts with the fact that ARGB32 and RGB24 have one field of type UInt32. Also, the field names are not r, g, b or x, y, z, but c1, c2, c3. This is to prevent direct access to the fields by mistaking a color for RGB or XYZ, in addition to the viewpoint of generality.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"As the definitions above indicate, RGBE32 and XYZ32 are parametric types with \"component type\" T. This is common with RGB{T} and XYZ{T} and different from ARGB32 and RGB24. If T is not explicitly specified in the constructor, Float32 is applied.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using HDRColorTypes\nusing FixedPointNumbers\nRGBE32(100, 0, 0) # constructs an `RGBE32{Float32}`\nRGB(100.0, 0, 0), RGB(1, 0, 0) # The determination of `T` differs from `RGB`.\nRGBE32{Float16}(10, 20, 30) # You can specify `T` explicitly.\nXYZE32{Float64}(10, 20, 30)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Of course, the type of the component values is T, and the values are lazily converted.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using ColorTypes\nred(RGBE32{Float16}(3.14, 0, 0))\ncomp2(XYZE32{Float32}(0, 2.71, 0)) # The actual mantissa part is only 8-bit","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Note that regardless of the component type T, the entities of the instances of RGBE32 and XYZE32 are 32-bit.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"sizeof(RGBE32{Float32})\nsizeof(RGBE32{Float64})","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"To be compatible with the RGB and XYZ constructors, it is not allowed to pass directly the mantissa and exponent parts to the constructor arguments. You can use the factory functions rgbe32 and xyze32, and their generic version ccce32.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"rgbe32(0x12, 0x34, 0x56, 0x78)\nxyze32(0x12345678)\nccce32(RGBE32{Float64}, 0x12345678)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"warning: Warning\nIt is not recommended to reinterpret an RGBE32 or XYZE32 color to UInt32 as it is a source of confusion.reinterpret(UInt32, rgbe32(0x12345678))","category":"page"}]
}
